openapi: 3.0.0
info:
  title: API Title
  version: '1.0'
servers:
  - url: https://api.example.com/v1
    description: сервер1
paths:
  /user/registration:
    post:
      tags:
        - User
      summary: Регистраия
      description: Регистраия
      operationId: Регистраия
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registration'
      responses:
        '200':
          description: OK
        '400':
          description: Некорректный логин
        '500':
          description: Ошибка сервера
  /user/login:
    post:
      tags:
        - User
      summary: Вход в систему
      description: аутенфикация 
      operationId: login
      requestBody:
        description: Отправка логина и пароля
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Bearer Token для дальнейшей аутентификации
                    example: eyJ0eXAwcvvcb1QiLCJhbGciOsdfsUzI1NiJ9.eyJpZCI6IjEzMzciLCJ1c2VybmFtZSI6ImJpem9uZSIswwwfcI6MTU5NDIwOTYwMCwicm9sZSI6InVzZXIifQ.ZvkYYnyM92xvxcvNW9_hSis7_x3_9rymsDcvcbvuOcc1I
        '401':
          description: Ошибка аутентификации, неверные учетные данные
        '500':
          description: Внутренняя ошибка сервера
  /user/logout:
    get:
      tags:
        - User
      summary: выход
      description: выход из аккаунта
      responses:
        '200':
          description: OK
  /user/refreshtoken:
    post:
      tags:
        - User
      summary: обновление токена доступа
      description: получениее нового access токена и refresh токена
      requestBody:
        description: Отправка токена
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
        required: true
      responses:
        '200':
          description: Успешно получен новый токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: refresh токен
                    example: eyJ0eXAwcvvcb1QiLCJhbGciOsdfsUzI1NiJ9.eyJpZCI6IjEzMzciLCJ1c2VybmFtZSI6ImJpem9uZSIswwwfcI6MTU5NDIwOTYwMCwicm9sZSI6InVzZXIifQ.ZvkYYnyM92xvxcvNW9_hSis7_x3_9rymsDcvcbvuOcc1I
        '401':
          description: Ошибка аутентификации, неверные учетные данные
        '500':
          description: Внутренняя ошибка сервера

  /user/passchange:
    post:
      tags:
        - User
      summary: смена пароля
      description: смена пароля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: example@mail.ru
                

  /user/who_am_i:
    get:
      tags:
        - User
      summary: какой я пользоователь
      description: проверка под каким пользователем выполнен вход в систему
  /products:
    get:
      tags:
        - Product
      summary: Получение списка товаров
      description: Получение списка товаров
      operationId: getcatalog
      parameters:
        - name: limit
          in: query
          description: Максимальное количество ресурсов в ответе
          required: false
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение для пагинации
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Уникальный идентификатор ресурса
                    name:
                      type: string
                      description: Название ресурса
                    description:
                      type: string
                      description: Описание ресурса
                    active:
                      type: boolean
                      description: Статус активности ресурса
        '400':
          description: Некорректный запрос
        '404':
          description: Не найдено
        '500':
          description: Ошибка сервера
    post:
      tags:
        - Product
      summary: Создание нового заказа
      description: Создание нового заказа
      operationId: addForm
      requestBody:
        description: Создание нового заказа
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Успешно
        '400':
          description: Некорректный запрос
        '500':
          description: Ошибка сервера
  /products/{productId}:
    get:
      tags:
        - Product
      summary: Получить запись о товаре
      description: Возвращает данные о запрашиваемом товаре
      operationId: getResourceById
      parameters:
        - name: ProductId
          in: path
          description: ID Product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Некорректный запрос
        '404':
          description: Не найдено
        '500':
          description: Ошибка сервера        
  /orders/add:
    post:
      tags:
        - Order
      summary: Создание нового заказа
      description: Создание нового заказа
      operationId: addForm
      requestBody:
        description: Создание заказа
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '201':
          description: Ресурс успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Некорректные данные запроса
        '500':
          description: Внутренняя ошибка сервера
    put:
      tags:
        - Order
      summary: Обновление существующего заказа
      description: Обновление существующего заказа
      operationId: updateform
      requestBody:
        description: Обновление существующего заказа
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Успешно
        '400':
          description: Ошибка запроса
        '500':
          description: Ошибка сервера
  /orders/{orderId}:
    post:
      tags:
        - Order
      summary: Внесение изменений в заказ
      description: Внесение изменений в заказ
      operationId: updateform
      requestBody:
        description: Внесение изменений в существующий заказ
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Внесение изменений в заказ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Некоррректный запрос
        '404':
          description: Заказ не найден
        '500':
          description: Ошибка сервера
components:
  schemas:
    login:
      type: object
      properties:
        username:
          type: string
          description: логин
          example: userlogin1
        password:
          type: string
          format: password
          description: пароль
    Storage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1000000
        name:
          type: string
          example: StorageName
        adress:
          type: string
          example: Storage adress
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1000000
        Product_name:
          type: string
          example: Product name
        creation_date:
          type: string
          format: DD-MM-YYYY 00:00:00
          example: 01-01-1970 00:00:00
        changed_date:
          type: string
          format: DD-MM-YYYY 00:00:00
          example: 01-01-1970 00:00:00
        amount:
          type: integer
          format: int64
          example: 100
        category:
          type: string
          example: category1
        Storage:
          $ref: '#/components/schemas/Storage'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: float
          example: 1000000
        number:
          type: string
          example: A100000
        cost:
          type: number
          format: int64
          example: 100
        status:
          type: string
          description: Статус заказа
          enum:
            - Создан
            - В обработке
            - Ожидается оплата
            - Принят
            - Оформление доставки
            - Доставка в процессе
            - Завершен
            - Отклонен
        employee:
          $ref: '#/components/schemas/User_Employee'
        client:
          $ref: "#/components/schemas/User_Client"
        Product:
          type: array
          items:
            $ref: '#components/schemas/Product'
    User_Employee:
      type: object
      properties:
        id:
          type: integer
          format: float
          example: 1000000
        status:
          type: string
          description: Должность
          enum:
            - Продавец
            - Менеджер
            - Кладовщик
            - Управляющий
            - работник склада
            - Ответственный за доставку
        FIO:
          type: string
          example: Иванов Иван Иванович
    User_Client:
      type: object
      properties:
        id:
          type: integer
          format: float
          example: 1000000
        FIO:
          type: string
          example: Иванов Иван Иванович
        Adress:
          type: string
          example: г. Москва, ул. Ленина д.5, к-1, кв.10
    token:
      type: object
      properties:
        token:
          type: string
          example: eyJ0eXAwcvvcb1QiLCJhbGciOsdfsUzI1NiJ9.eyJpZCI6IjEzMzciLCJ1c2VybmFtZSI6ImJpem9uZSIswwwfcI6MTU5NDIwOTYwMCwicm9sZSI6InVzZXIifQ.ZvkYYnyM92xvxcvNW9_hSis7_x3_9rymsDcvcbvuOcc1I


